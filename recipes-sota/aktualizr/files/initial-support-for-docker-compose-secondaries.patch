From 8a749de9d0a33871a472c4939068c1d7b014021f Mon Sep 17 00:00:00 2001
From: Ming Liu <ming.liu@toradex.com>
Date: Sun, 23 Feb 2020 15:12:14 +0100
Subject: [PATCH] Initial support for docker-compose secondaries

Upstream-Status: Inappropriate [Torizon specific]

Signed-off-by: Phil Wise <phil@phil-wise.com>
Signed-off-by: Stefan Agner <stefan.agner@toradex.com>
Signed-off-by: Ming Liu <ming.liu@toradex.com>
---
 config/secondary/dockercomposesec.json        |  14 +++
 config/secondary/example-redis.yml            |   5 +
 src/aktualizr_primary/secondary.cc            |   5 +
 src/aktualizr_primary/secondary_config.cc     |   7 ++
 src/aktualizr_primary/secondary_config.h      |   5 +-
 src/virtual_secondary/CMakeLists.txt          |   4 +-
 .../dockercomposesecondary.cc                 | 103 ++++++++++++++++++
 .../dockercomposesecondary.h                  |  42 +++++++
 8 files changed, 182 insertions(+), 3 deletions(-)
 create mode 100644 config/secondary/dockercomposesec.json
 create mode 100644 config/secondary/example-redis.yml
 create mode 100644 src/virtual_secondary/dockercomposesecondary.cc
 create mode 100644 src/virtual_secondary/dockercomposesecondary.h

diff --git a/config/secondary/dockercomposesec.json b/config/secondary/dockercomposesec.json
new file mode 100644
index 00000000..93d81a69
--- /dev/null
+++ b/config/secondary/dockercomposesec.json
@@ -0,0 +1,14 @@
+{
+  "docker-compose": [
+    {
+      "partial_verifying" : "false",
+      "ecu_hardware_id" : "docker-compose",
+      "full_client_dir" : "storage/demo-dsec1",
+      "ecu_private_key" : "sec.private",
+      "ecu_public_key" : "sec.public",
+      "firmware_path" : "storage/demo-dsec1/docker.yml",
+      "target_name_path" : "storage/demo-dsec1/target_name",
+      "metadata_path" : "storage/demo-dsec1/metadata"
+    }
+  ]
+}
diff --git a/config/secondary/example-redis.yml b/config/secondary/example-redis.yml
new file mode 100644
index 00000000..d6dfa2e6
--- /dev/null
+++ b/config/secondary/example-redis.yml
@@ -0,0 +1,5 @@
+version: '3'
+services:
+  redis:
+    image: "redis:alpine"
+    restart: always
diff --git a/src/aktualizr_primary/secondary.cc b/src/aktualizr_primary/secondary.cc
index a9b29bc8..2ecebe92 100644
--- a/src/aktualizr_primary/secondary.cc
+++ b/src/aktualizr_primary/secondary.cc
@@ -31,6 +31,11 @@ static SecondaryFactoryRegistry sec_factory_registry = {
        auto virtual_sec_cgf = dynamic_cast<const VirtualSecondaryConfig&>(config);
        return Secondaries({std::make_shared<VirtualSecondary>(virtual_sec_cgf)});
      }},
+    {DockerComposeSecondaryConfig::Type,
+     [](const SecondaryConfig& config, Aktualizr& /* unused */) {
+       auto docker_compose_sec_cgf = dynamic_cast<const DockerComposeSecondaryConfig&>(config);
+       return Secondaries({std::make_shared<DockerComposeSecondary>(docker_compose_sec_cgf)});
+     }},
     //  {
     //     Add another secondary factory here
     //  }
diff --git a/src/aktualizr_primary/secondary_config.cc b/src/aktualizr_primary/secondary_config.cc
index 09c67138..a8f24ee3 100644
--- a/src/aktualizr_primary/secondary_config.cc
+++ b/src/aktualizr_primary/secondary_config.cc
@@ -114,4 +114,11 @@ void JsonConfigParser::createVirtualSecondariesCfg(Configs& configs, const Json:
   }
 }
 
+void JsonConfigParser::createDockerComposeSecondariesCfg(Configs& configs, const Json::Value& json_docker_compose_sec_cfg) {
+  for (const auto& json_config : json_docker_compose_sec_cfg) {
+    auto docker_compose_config = std::make_shared<DockerComposeSecondaryConfig>(json_config);
+    configs.push_back(docker_compose_config);
+  }
+}
+
 }  // namespace Primary
diff --git a/src/aktualizr_primary/secondary_config.h b/src/aktualizr_primary/secondary_config.h
index 68f31ef4..86e9312a 100644
--- a/src/aktualizr_primary/secondary_config.h
+++ b/src/aktualizr_primary/secondary_config.h
@@ -7,6 +7,7 @@
 
 #include "primary/secondary_config.h"
 #include "virtualsecondary.h"
+#include "dockercomposesecondary.h"
 
 namespace Primary {
 
@@ -67,13 +68,15 @@ class JsonConfigParser : public SecondaryConfigParser {
  private:
   static void createIPSecondariesCfg(Configs& configs, const Json::Value& json_ip_sec_cfg);
   static void createVirtualSecondariesCfg(Configs& configs, const Json::Value& json_virtual_sec_cfg);
+  static void createDockerComposeSecondariesCfg(Configs& configs, const Json::Value& json_docker_compose_sec_cfg);
   // add here a factory method for another type of secondary config
 
  private:
   using SecondaryConfigFactoryRegistry = std::unordered_map<std::string, std::function<void(Configs&, Json::Value&)>>;
 
   SecondaryConfigFactoryRegistry sec_cfg_factory_registry_ = {
-      {IPSecondariesConfig::Type, createIPSecondariesCfg}, {VirtualSecondaryConfig::Type, createVirtualSecondariesCfg}
+      {IPSecondariesConfig::Type, createIPSecondariesCfg}, {VirtualSecondaryConfig::Type, createVirtualSecondariesCfg},
+      {DockerComposeSecondaryConfig::Type, createDockerComposeSecondariesCfg}
       // add here factory method for another type of secondary config
   };
 
diff --git a/src/virtual_secondary/CMakeLists.txt b/src/virtual_secondary/CMakeLists.txt
index 2017fe75..78e7163e 100644
--- a/src/virtual_secondary/CMakeLists.txt
+++ b/src/virtual_secondary/CMakeLists.txt
@@ -1,6 +1,6 @@
-set(SOURCES managedsecondary.cc virtualsecondary.cc partialverificationsecondary.cc)
+set(SOURCES managedsecondary.cc virtualsecondary.cc partialverificationsecondary.cc dockercomposesecondary.cc)
 
-set(HEADERS managedsecondary.h virtualsecondary.h partialverificationsecondary.h)
+set(HEADERS managedsecondary.h virtualsecondary.h partialverificationsecondary.h dockercomposesecondary.h)
 
 set(TARGET virtual_secondary)
 
diff --git a/src/virtual_secondary/dockercomposesecondary.cc b/src/virtual_secondary/dockercomposesecondary.cc
new file mode 100644
index 00000000..612352b1
--- /dev/null
+++ b/src/virtual_secondary/dockercomposesecondary.cc
@@ -0,0 +1,103 @@
+#include "dockercomposesecondary.h"
+#include "utilities/types.h"
+#include "logging/logging.h"
+#include "utilities/fault_injection.h"
+
+#include <sstream>
+
+using std::stringstream;
+
+namespace Primary {
+
+const char* const DockerComposeSecondaryConfig::Type = "docker-compose";
+
+DockerComposeSecondaryConfig::DockerComposeSecondaryConfig(const Json::Value& json_config) : ManagedSecondaryConfig(Type) {
+  partial_verifying = json_config["partial_verifying"].asBool();
+  ecu_serial = json_config["ecu_serial"].asString();
+  ecu_hardware_id = json_config["ecu_hardware_id"].asString();
+  full_client_dir = json_config["full_client_dir"].asString();
+  ecu_private_key = json_config["ecu_private_key"].asString();
+  ecu_public_key = json_config["ecu_public_key"].asString();
+  firmware_path = json_config["firmware_path"].asString();
+  target_name_path = json_config["target_name_path"].asString();
+  metadata_path = json_config["metadata_path"].asString();
+}
+
+std::vector<DockerComposeSecondaryConfig> DockerComposeSecondaryConfig::create_from_file(
+    const boost::filesystem::path& file_full_path) {
+  Json::Value json_config;
+  std::ifstream json_file(file_full_path.string());
+  Json::parseFromStream(Json::CharReaderBuilder(), json_file, &json_config, nullptr);
+  json_file.close();
+
+  std::vector<DockerComposeSecondaryConfig> sec_configs;
+  sec_configs.reserve(json_config[Type].size());
+
+  for (const auto& item : json_config[Type]) {
+    sec_configs.emplace_back(DockerComposeSecondaryConfig(item));
+  }
+  return sec_configs;
+}
+
+void DockerComposeSecondaryConfig::dump(const boost::filesystem::path& file_full_path) const {
+  Json::Value json_config;
+
+  json_config["partial_verifying"] = partial_verifying;
+  json_config["ecu_serial"] = ecu_serial;
+  json_config["ecu_hardware_id"] = ecu_hardware_id;
+  json_config["full_client_dir"] = full_client_dir.string();
+  json_config["ecu_private_key"] = ecu_private_key;
+  json_config["ecu_public_key"] = ecu_public_key;
+  json_config["firmware_path"] = firmware_path.string();
+  json_config["target_name_path"] = target_name_path.string();
+  json_config["metadata_path"] = metadata_path.string();
+
+  Json::Value root;
+  root[Type].append(json_config);
+
+  Json::StreamWriterBuilder json_bwriter;
+  json_bwriter["indentation"] = "\t";
+  std::unique_ptr<Json::StreamWriter> const json_writer(json_bwriter.newStreamWriter());
+
+  boost::filesystem::create_directories(file_full_path.parent_path());
+  std::ofstream json_file(file_full_path.string());
+  json_writer->write(root, &json_file);
+  json_file.close();
+}
+
+DockerComposeSecondary::DockerComposeSecondary(Primary::DockerComposeSecondaryConfig sconfig_in)
+    : ManagedSecondary(std::move(sconfig_in)) {}
+
+bool DockerComposeSecondary::storeFirmware(const std::string& target_name, const std::string& content) {
+  if (fiu_fail((std::string("secondary_install_") + getSerial().ToString()).c_str()) != 0) {
+    return false;
+  }
+
+  Utils::writeFile(sconfig.target_name_path, target_name);
+  Utils::writeFile(sconfig.firmware_path, content);
+  sync();
+
+  stringstream cmd_line;
+  cmd_line << "docker-compose -f " << sconfig.firmware_path << " up -d";
+  LOG_INFO << " Running " << cmd_line.str();
+  int rescode = system(cmd_line.str().c_str());
+  return rescode == 0;
+}
+
+bool DockerComposeSecondary::getFirmwareInfo(Uptane::InstalledImageInfo& firmware_info) const {
+  std::string content;
+
+  if (!boost::filesystem::exists(sconfig.target_name_path) || !boost::filesystem::exists(sconfig.firmware_path)) {
+    firmware_info.name = std::string("noimage");
+    content = "";
+  } else {
+    firmware_info.name = Utils::readFile(sconfig.target_name_path.string());
+    content = Utils::readFile(sconfig.firmware_path.string());
+  }
+  firmware_info.hash = Uptane::ManifestIssuer::generateVersionHashStr(content);
+  firmware_info.len = content.size();
+
+  return true;
+}
+
+}  // namespace Primary
diff --git a/src/virtual_secondary/dockercomposesecondary.h b/src/virtual_secondary/dockercomposesecondary.h
new file mode 100644
index 00000000..9452a684
--- /dev/null
+++ b/src/virtual_secondary/dockercomposesecondary.h
@@ -0,0 +1,42 @@
+#ifndef PRIMARY_DOCKERCOMPOSESECONDARY_H_
+#define PRIMARY_DOCKERCOMPOSESECONDARY_H_
+
+#include <string>
+#include "managedsecondary.h"
+#include "utilities/types.h"
+
+namespace Primary {
+
+class DockerComposeSecondaryConfig : public ManagedSecondaryConfig {
+ public:
+  DockerComposeSecondaryConfig() : ManagedSecondaryConfig(Type) {}
+  DockerComposeSecondaryConfig(const Json::Value& json_config);
+
+  static std::vector<DockerComposeSecondaryConfig> create_from_file(const boost::filesystem::path& file_full_path);
+  void dump(const boost::filesystem::path& file_full_path) const;
+
+ public:
+  static const char* const Type;
+};
+
+/**
+ * An primary secondary that runs on the same device but treats
+ * the firmware that it is pushed as a docker-compose yaml file
+ */
+class DockerComposeSecondary : public ManagedSecondary {
+ public:
+  explicit DockerComposeSecondary(Primary::DockerComposeSecondaryConfig sconfig_in);
+  ~DockerComposeSecondary() override = default;
+
+  std::string Type() const override { return DockerComposeSecondaryConfig::Type; }
+
+  bool ping() const override { return true; }
+
+ private:
+  bool storeFirmware(const std::string& target_name, const std::string& content) override;
+  bool getFirmwareInfo(Uptane::InstalledImageInfo& firmware_info) const override;
+};
+
+}  // namespace Primary
+
+#endif  // PRIMARY_DOCKERCOMPOSESECONDARY_H_
-- 
2.25.0

